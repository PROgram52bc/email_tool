#!/bin/bash
# - use a folder to store contents(e.g. confirm/1.txt, confirm/2.txt...)
# √ use a result file to record if last sending has succeeded
# √ use an associative array inside to record sending results(e.g. result[1]='y')
# - use y,n,a,q? to confirm before sending every email
# bash code to send email:
if test $# != 1; then echo "usage: ./send.sh composed_template_name"
	exit
elif test ! -d ./letters/$1; then echo "no directory $1, maybe try './compose template_name XxxData.csv' first"
	exit
fi

IFS=,
FOLDER=./letters/${1%/} # remove the final /
DATAFILE=${FOLDER}/data.csv
RESULTFILE=${FOLDER}/result.csv
SUBJECT_ZH=$(cat $FOLDER/subject_zh.txt)
SUBJECT_EN=$(cat $FOLDER/subject_en.txt)
declare -A resultArr
confirm=y
if test -f ${RESULTFILE}
then
	while read num result
	do resultArr[$num]=$result; 
	done < ${RESULTFILE}
else
	while read num GARBAGE
	do [[ $num =~ ^[0-9]+$ ]] && resultArr[$num]=n; # only when num is a real number
	done < ${DATAFILE}
fi

read -a keyArr < $DATAFILE # read the 1st line to an array

while read -a valArr 
do
	# declare all variables
	for i in ${!keyArr[@]}; do
		keyArr[$i]=${keyArr[$i]// /_}
		varArr[$i]=${varArr[$i]// /_}
		declare "${keyArr[$i]}"="${valArr[$i]}"
	done
	# if num has not been sent AND num is a valid number
	if test "${resultArr[$num]}" != y && 
		[[ ${num} =~ ^[0-9]+$ ]]
	then
		# set subject
		SUBJECT="$([ "$isEng" = y ] && 
		echo ${SUBJECT_EN:?English subject is empty} || 
		echo ${SUBJECT_ZH:?Chinese subject is empty})"
		# ask for confirmation
		if test $confirm = y; then
			echo
			echo "Num: $num"
			echo "To: $name, $address"
			echo "Subject: $SUBJECT"
			echo
			cat ${FOLDER}/${num}.txt
			echo
			echo "send right now? (y/a/n/q)"
			read response < /dev/tty
			# echo "Response: $response"
			case $response in
				a)
					confirm=n
					;;
				y)
					;;
				n)
					continue
					;;
				*)
					break
					;;
			esac
		fi
		# send the mail
		cat ${FOLDER}/${num}.txt | mailx -s $SUBJECT ${address}
		# check the result
		retval=$?
		if test $retval = 0; then
			resultArr[$num]=y
			echo email sent to $name, $address
		else
			echo email to $name, $address was not sent. return value: $retval
		fi
	fi
done << EOF
$(sed 1d $DATAFILE)
EOF

# write resultArr to $RESULTFILE
for key in ${!resultArr[@]}; do
	echo "${key},${resultArr[$key]}"
done > ${RESULTFILE}
